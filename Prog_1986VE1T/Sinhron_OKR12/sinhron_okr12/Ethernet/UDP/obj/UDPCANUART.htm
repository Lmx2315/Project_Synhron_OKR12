<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\UDPCANUART.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\UDPCANUART.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sat Jul 04 14:31:41 2015
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ETHERNET_Handler &rArr; ReadEthInPacket &rArr; ReadIPInPacket &rArr; ReadUDPInPacket &rArr; OnUDPReceive &rArr; IO &rArr; Menu1 &rArr; Transf &rArr; SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[b]">MIL_STD_1553B2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">MIL_STD_1553B2_Handler</a><BR>
 <LI><a href="#[c]">MIL_STD_1553B1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MIL_STD_1553B1_Handler</a><BR>
 <LI><a href="#[d]">USB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">USB_Handler</a><BR>
 <LI><a href="#[e]">CAN1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">CAN1_Handler</a><BR>
 <LI><a href="#[f]">CAN2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">CAN2_Handler</a><BR>
 <LI><a href="#[10]">DMA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DMA_Handler</a><BR>
 <LI><a href="#[13]">SSP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SSP1_Handler</a><BR>
 <LI><a href="#[14]">BUSY_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">BUSY_Handler</a><BR>
 <LI><a href="#[15]">ARINC429R_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">ARINC429R_Handler</a><BR>
 <LI><a href="#[16]">POWER_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">POWER_Handler</a><BR>
 <LI><a href="#[17]">WWDG_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">WWDG_Handler</a><BR>
 <LI><a href="#[18]">TIMER4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">TIMER4_Handler</a><BR>
 <LI><a href="#[19]">TIMER1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">TIMER1_Handler</a><BR>
 <LI><a href="#[1a]">TIMER2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">TIMER2_Handler</a><BR>
 <LI><a href="#[1b]">TIMER3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">TIMER3_Handler</a><BR>
 <LI><a href="#[1c]">ADC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_Handler</a><BR>
 <LI><a href="#[1e]">SSP3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">SSP3_Handler</a><BR>
 <LI><a href="#[1f]">SSP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">SSP2_Handler</a><BR>
 <LI><a href="#[20]">ARINC429T1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ARINC429T1_Handler</a><BR>
 <LI><a href="#[21]">ARINC429T2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ARINC429T2_Handler</a><BR>
 <LI><a href="#[22]">ARINC429T3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ARINC429T3_Handler</a><BR>
 <LI><a href="#[23]">ARINC429T4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ARINC429T4_Handler</a><BR>
 <LI><a href="#[24]">BKP_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">BKP_Handler</a><BR>
 <LI><a href="#[25]">EXT_INT1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">EXT_INT1_Handler</a><BR>
 <LI><a href="#[26]">EXT_INT2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">EXT_INT2_Handler</a><BR>
 <LI><a href="#[27]">EXT_INT3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">EXT_INT3_Handler</a><BR>
 <LI><a href="#[28]">EXT_INT4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">EXT_INT4_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">ARINC429R_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">ARINC429T1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">ARINC429T2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[22]">ARINC429T3_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">ARINC429T4_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">BKP_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">BUSY_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">CAN1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">CAN2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">DMA_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">ETHERNET_Handler</a> from application.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[25]">EXT_INT1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">EXT_INT2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[27]">EXT_INT3_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[28]">EXT_INT4_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">MIL_STD_1553B1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">MIL_STD_1553B2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">POWER_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">SSP1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1f]">SSP2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">SSP3_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">TIMER1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">TIMER2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1b]">TIMER3_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[18]">TIMER4_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[11]">UART1_Handler</a> from application.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">UART2_Handler</a> from application.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">USB_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[17]">WWDG_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2d]">__main</a> from __main.o(!!!main) referenced from startup.o(.text)
 <LI><a href="#[2c]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[2b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2a]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[30]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[90]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[31]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[32]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[3a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[34]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[a6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[36]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[aa]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[af]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[3f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[ba]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[bc]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[bf]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[37]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c0]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; UART_control &rArr; IO &rArr; Menu1 &rArr; Transf &rArr; SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c1]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c2]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[40]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[42]"></a>reverse</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, application.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[44]"></a>itoa</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, application.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[46]"></a>Transf</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Transf &rArr; SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendT2
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendT
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leng
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaUDP
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu1
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_K613
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_K613
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_K612
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_K612
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_K611
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_K611
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_monitor
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_K615
</UL>

<P><STRONG><a name="[4b]"></a>control_K615</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, application.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
</UL>

<P><STRONG><a name="[5b]"></a>SYS_control</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO
</UL>

<P><STRONG><a name="[4c]"></a>SYS_monitor</STRONG> (Thumb, 1292 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SYS_monitor &rArr; Transf &rArr; SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO
</UL>

<P><STRONG><a name="[4d]"></a>init_K611</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, application.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
</UL>

<P><STRONG><a name="[4e]"></a>control_K611</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, application.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
</UL>

<P><STRONG><a name="[4f]"></a>init_K612</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, application.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
</UL>

<P><STRONG><a name="[50]"></a>control_K612</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, application.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
</UL>

<P><STRONG><a name="[51]"></a>init_K613</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, application.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
</UL>

<P><STRONG><a name="[52]"></a>control_K613</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, application.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
</UL>

<P><STRONG><a name="[53]"></a>Transf_485</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Transf_485 &rArr; sendT2 &rArr; zputs2
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendT2
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>ZTransf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ZTransf &rArr; zputs2
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zputs2
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zputs
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO
</UL>

<P><STRONG><a name="[c4]"></a>SPITxInProgress</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>SPITxFull</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>SPIRxReady</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>SPIPut</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>SPIGet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>SPIInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>spi_cs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>spi_transf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>SPI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>IO</STRONG> (Thumb, 2654 bytes, Stack size 32 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = IO &rArr; Menu1 &rArr; Transf &rArr; SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leng
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZTransf
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_monitor
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_control
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnUDPReceive
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_control
</UL>

<P><STRONG><a name="[cd]"></a>led_high</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>led_low</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>fillBuf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, application.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearBuf
</UL>

<P><STRONG><a name="[5d]"></a>clearBuf</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, application.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBuf
</UL>

<P><STRONG><a name="[60]"></a>getStr</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getStr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_control
</UL>

<P><STRONG><a name="[5f]"></a>UART_control</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = UART_control &rArr; IO &rArr; Menu1 &rArr; Transf &rArr; SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>UART1_Handler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART2_Handler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ETHERNET_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ETHERNET_Handler &rArr; ReadEthInPacket &rArr; ReadIPInPacket &rArr; ReadUDPInPacket &rArr; OnUDPReceive &rArr; IO &rArr; Menu1 &rArr; Transf &rArr; SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPacket
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEthInPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>OnEthReceive</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>OnIPReceive</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>OnARPReceive</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>OnUDPReceive</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = OnUDPReceive &rArr; IO &rArr; Menu1 &rArr; Transf &rArr; SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaUDP
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUDPInPacket
</UL>

<P><STRONG><a name="[6e]"></a>Led_Zahvat</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>POWER_LED</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>OnICMPReceive</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>SendEthPacket</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>main</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = main &rArr; UART_control &rArr; IO &rArr; Menu1 &rArr; Transf &rArr; SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLKConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTEConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTDConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTCConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTBConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTAConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNETConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Zahvat
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_control
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf_485
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MIL_STD_1553B2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MIL_STD_1553B1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>USB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CAN1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>CAN2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SSP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BUSY_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUSY_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUSY_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ARINC429R_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429R_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429R_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>POWER_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WWDG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIMER2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSP3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SSP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ARINC429T1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ARINC429T2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ARINC429T3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ARINC429T4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BKP_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXT_INT1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXT_INT2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXT_INT3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXT_INT4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[68]"></a>PORTAConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, porta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>PORTBConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, portb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>PORTB_wr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, portb.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>PHYInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PHYInit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNETConfig
</UL>

<P><STRONG><a name="[d6]"></a>SetPHYReg</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, ethernet.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>GetPHYReg</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ethernet.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>ClearMemory</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ethernet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACReset
</UL>

<P><STRONG><a name="[6f]"></a>MACReset</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MACReset
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNETConfig
</UL>

<P><STRONG><a name="[67]"></a>ETHERNETConfig</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETHERNETConfig &rArr; PHYInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACReset
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHYInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>SendViaETHERNET</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendViaETHERNET
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaEthernet
</UL>

<P><STRONG><a name="[d8]"></a>ReadDataFromR_Buffer</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, ethernet.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>ReadPacket</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Handler
</UL>

<P><STRONG><a name="[6b]"></a>PORTCConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, portc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>PORTDConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, portd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>PORTEConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, porte.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>RST_CLKConfig</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>UART1Config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>zputc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zputs
</UL>

<P><STRONG><a name="[55]"></a>zputs</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = zputs
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zputc
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendT
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZTransf
</UL>

<P><STRONG><a name="[49]"></a>leng</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendT2
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendT
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
</UL>

<P><STRONG><a name="[47]"></a>sendT</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sendT &rArr; zputs
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zputs
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leng
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
</UL>

<P><STRONG><a name="[66]"></a>UART2Config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>zputc2</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zputs2
</UL>

<P><STRONG><a name="[56]"></a>zputs2</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = zputs2
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zputc2
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendT2
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZTransf
</UL>

<P><STRONG><a name="[48]"></a>sendT2</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sendT2 &rArr; zputs2
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zputs2
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leng
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf_485
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
</UL>

<P><STRONG><a name="[d9]"></a>Menu</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, terminal_1.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>Menu1</STRONG> (Thumb, 1348 bytes, Stack size 16 bytes, terminal_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Menu1 &rArr; Transf &rArr; SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO
</UL>

<P><STRONG><a name="[74]"></a>GetMACFromIP</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetMACFromIP &rArr; MemCmp
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaIP
</UL>

<P><STRONG><a name="[76]"></a>SetMACToIPMatch</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetMACToIPMatch &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadARPInPacket
</UL>

<P><STRONG><a name="[78]"></a>SendARPResponse</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaEthernet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCpy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocEthOutDataARP
</UL>

<P><STRONG><a name="[7b]"></a>ReadARPInPacket</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ReadARPInPacket &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaEthernet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCpy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCmp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocEthOutDataARP
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMACToIPMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEthInPacket
</UL>

<P><STRONG><a name="[7c]"></a>MallocICMPOutData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, icmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocEthOutData
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaICMP
</UL>

<P><STRONG><a name="[84]"></a>FillICMPCheckSum</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, icmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaICMP
</UL>

<P><STRONG><a name="[7e]"></a>ReadICMPEchoInPacket</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReadICMPEchoInPacket &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaIP
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocIPOutData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICMPInPacket
</UL>

<P><STRONG><a name="[82]"></a>ReadICMPInPacket</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ReadICMPInPacket &rArr; ReadICMPEchoInPacket &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICMPEchoInPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIPInPacket
</UL>

<P><STRONG><a name="[83]"></a>SendViaICMP</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, icmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillICMPCheckSum
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocICMPOutData
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCpy
</UL>

<P><STRONG><a name="[da]"></a>FillIPCheckSum</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ip.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>MallocIPOutData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MallocIPOutData
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocEthOutData
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaIP
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICMPEchoInPacket
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocUDPOutData
</UL>

<P><STRONG><a name="[85]"></a>ReadIPInPacket</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ReadIPInPacket &rArr; ReadUDPInPacket &rArr; OnUDPReceive &rArr; IO &rArr; Menu1 &rArr; Transf &rArr; SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICMPInPacket
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCpy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCmp
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUDPInPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEthInPacket
</UL>

<P><STRONG><a name="[88]"></a>FillIPHeader</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FillIPHeader &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaIP
</UL>

<P><STRONG><a name="[81]"></a>SendViaIP</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocIPOutData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaEthernet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCpy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMACFromIP
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillIPHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICMPEchoInPacket
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaUDP
</UL>

<P><STRONG><a name="[87]"></a>ReadUDPInPacket</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ReadUDPInPacket &rArr; OnUDPReceive &rArr; IO &rArr; Menu1 &rArr; Transf &rArr; SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnUDPReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIPInPacket
</UL>

<P><STRONG><a name="[89]"></a>MallocUDPOutData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MallocUDPOutData &rArr; MallocIPOutData
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocIPOutData
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaUDP
</UL>

<P><STRONG><a name="[4a]"></a>SendViaUDP</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaIP
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreCheckSum
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocUDPOutData
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnUDPReceive
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transf
</UL>

<P><STRONG><a name="[db]"></a>FillUDPHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>FillUDPCheckSum</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>MallocEthInPacket</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mac.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>MallocEthOutData</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocIPOutData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocICMPOutData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaEthernet
</UL>

<P><STRONG><a name="[79]"></a>MallocEthOutDataARP</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadARPInPacket
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendARPResponse
</UL>

<P><STRONG><a name="[8b]"></a>FillEthHeader</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaEthernet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEthernetPacket
</UL>

<P><STRONG><a name="[8c]"></a>SendEthernetPacket</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, mac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEthHeader
</UL>

<P><STRONG><a name="[7a]"></a>SendViaEthernet</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocEthOutData
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCpy
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaETHERNET
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEthHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaIP
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadARPInPacket
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendARPResponse
</UL>

<P><STRONG><a name="[62]"></a>ReadEthInPacket</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ReadEthInPacket &rArr; ReadIPInPacket &rArr; ReadUDPInPacket &rArr; OnUDPReceive &rArr; IO &rArr; Menu1 &rArr; Transf &rArr; SendViaUDP &rArr; SendViaIP &rArr; SendViaEthernet &rArr; FillEthHeader &rArr; MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCmp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadARPInPacket
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIPInPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_Handler
</UL>

<P><STRONG><a name="[77]"></a>MemCpy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, memapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaIP
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaICMP
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICMPEchoInPacket
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaEthernet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadARPInPacket
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendARPResponse
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMACToIPMatch
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaUDP
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEthHeader
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIPInPacket
</UL>

<P><STRONG><a name="[75]"></a>MemCmp</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, memapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadARPInPacket
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMACFromIP
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEthInPacket
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIPInPacket
</UL>

<P><STRONG><a name="[8a]"></a>PreCheckSum</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, memapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PreCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaUDP
</UL>

<P><STRONG><a name="[80]"></a>CheckSum</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, memapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaIP
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICMPEchoInPacket
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendViaUDP
</UL>

<P><STRONG><a name="[5c]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO
</UL>

<P><STRONG><a name="[8f]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[33]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[5a]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO
</UL>

<P><STRONG><a name="[43]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillIPHeader
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIPInPacket
</UL>

<P><STRONG><a name="[de]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[e2]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[e5]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8e]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[2a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[93]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e7]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[9b]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[38]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[35]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[9c]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3d]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[41]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[e9]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6d]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[9f]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[99]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[98]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[91]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[92]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
