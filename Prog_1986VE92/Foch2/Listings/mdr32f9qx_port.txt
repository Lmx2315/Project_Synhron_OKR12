; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list -c --asm --interleave -o.\objects\mdr32f9qx_port.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mdr32f9qx_port.d --cpu=Cortex-M3 --apcs=interwork -IC:\SOFT_project\Mk\Project_Synhron_OKR12\Prog_1986VE92\Foch2\RTE -IC:\SOFT_project\Mk\Project_Synhron_OKR12\Prog_1986VE92\Foch2\RTE\Device\MDR1986BE92 -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Config -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\CoreSupport -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=513 -D_RTE_ -DUSE_MDR32F9Q2_Rev1 -W --enum_is_int --signed_chars C:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_port.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  PORT_DeInit PROC
;;;45       */
;;;46     void PORT_DeInit(MDR_PORT_TypeDef* PORTx)
000000  2100              MOVS     r1,#0
;;;47     {
;;;48       /* Check the parameters */
;;;49       assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;50     
;;;51       PORTx->ANALOG = 0;
000002  60c1              STR      r1,[r0,#0xc]
;;;52       PORTx->PULL = 0;
000004  6101              STR      r1,[r0,#0x10]
;;;53       PORTx->OE = 0;
000006  6041              STR      r1,[r0,#4]
;;;54       PORTx->RXTX = 0;
000008  6001              STR      r1,[r0,#0]
;;;55       PORTx->FUNC = 0;
00000a  6081              STR      r1,[r0,#8]
;;;56       PORTx->PD = 0;
00000c  6141              STR      r1,[r0,#0x14]
;;;57       PORTx->PWR = 0;
00000e  6181              STR      r1,[r0,#0x18]
;;;58       PORTx->GFEN = 0;
000010  61c1              STR      r1,[r0,#0x1c]
;;;59     }
000012  4770              BX       lr
;;;60     
                          ENDP

                  PORT_Init PROC
;;;69       */
;;;70     void PORT_Init(MDR_PORT_TypeDef* PORTx, const PORT_InitTypeDef* PORT_InitStruct)
000014  e92d4fff          PUSH     {r0-r11,lr}
;;;71     {
;;;72       uint32_t tmpreg_OE;
;;;73       uint32_t tmpreg_FUNC;
;;;74       uint32_t tmpreg_ANALOG;
;;;75       uint32_t tmpreg_PULL;
;;;76       uint32_t tmpreg_PD;
;;;77       uint32_t tmpreg_PWR;
;;;78       uint32_t tmpreg_GFEN;
;;;79       uint32_t portpin, pos, mask_s, mask_l, mask_d;
;;;80     
;;;81       /* Check the parameters */
;;;82       assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;83       assert_param(IS_PORT_PIN(PORT_InitStruct->PORT_Pin));
;;;84       assert_param(IS_PORT_OE(PORT_InitStruct->PORT_OE));
;;;85       assert_param(IS_PORT_PULL_UP(PORT_InitStruct->PORT_PULL_UP));
;;;86       assert_param(IS_PORT_PULL_DOWN(PORT_InitStruct->PORT_PULL_DOWN));
;;;87       assert_param(IS_PORT_PD_SHM(PORT_InitStruct->PORT_PD_SHM));
;;;88       assert_param(IS_PORT_PD(PORT_InitStruct->PORT_PD));
;;;89       assert_param(IS_PORT_GFEN(PORT_InitStruct->PORT_GFEN));
;;;90       assert_param(IS_PORT_FUNC(PORT_InitStruct->PORT_FUNC));
;;;91       assert_param(IS_PORT_SPEED(PORT_InitStruct->PORT_SPEED));
;;;92       assert_param(IS_PORT_MODE(PORT_InitStruct->PORT_MODE));
;;;93     
;;;94       /* Get current PORT register values */
;;;95       tmpreg_OE     = PORTx->OE;
000018  6842              LDR      r2,[r0,#4]
;;;96       tmpreg_FUNC   = PORTx->FUNC;
00001a  9202              STR      r2,[sp,#8]
00001c  6882              LDR      r2,[r0,#8]
;;;97       tmpreg_ANALOG = PORTx->ANALOG;
00001e  9201              STR      r2,[sp,#4]
000020  f8d0e00c          LDR      lr,[r0,#0xc]
;;;98       tmpreg_PULL   = PORTx->PULL;
000024  f8d09010          LDR      r9,[r0,#0x10]
;;;99       tmpreg_PD     = PORTx->PD;
000028  f8d0a014          LDR      r10,[r0,#0x14]
;;;100      tmpreg_PWR    = PORTx->PWR;
00002c  6982              LDR      r2,[r0,#0x18]
;;;101      tmpreg_GFEN   = PORTx->GFEN;
00002e  9200              STR      r2,[sp,#0]
000030  f8d0b01c          LDR      r11,[r0,#0x1c]
;;;102    
;;;103      /* Form new values */
;;;104      pos = 0;
000034  2200              MOVS     r2,#0
;;;105      mask_s = 0x0001;
000036  2301              MOVS     r3,#1
;;;106      mask_l = 0x00000003;
000038  2503              MOVS     r5,#3
;;;107      mask_d = 0x00010001;
00003a  f04f1401          MOV      r4,#0x10001
;;;108      for (portpin = PORT_InitStruct->PORT_Pin; portpin; portpin >>= 1)
00003e  880e              LDRH     r6,[r1,#0]
000040  e052              B        |L1.232|
                  |L1.66|
;;;109      {
;;;110        if (portpin & 0x1)
000042  07f7              LSLS     r7,r6,#31
000044  d04b              BEQ      |L1.222|
;;;111        {
;;;112          tmpreg_OE     = (tmpreg_OE     & ~mask_s) | (PORT_InitStruct->PORT_OE        <<  pos);
000046  9f02              LDR      r7,[sp,#8]
000048  f8d1c004          LDR      r12,[r1,#4]
00004c  439f              BICS     r7,r7,r3
00004e  fa0cfc02          LSL      r12,r12,r2
000052  ea47070c          ORR      r7,r7,r12
;;;113          tmpreg_FUNC   = (tmpreg_FUNC   & ~mask_l) | (PORT_InitStruct->PORT_FUNC      << (pos*2));
000056  9702              STR      r7,[sp,#8]
000058  0057              LSLS     r7,r2,#1
00005a  f8d1c01c          LDR      r12,[r1,#0x1c]
00005e  9703              STR      r7,[sp,#0xc]
000060  fa0cfc07          LSL      r12,r12,r7
000064  9f01              LDR      r7,[sp,#4]
000066  43af              BICS     r7,r7,r5
000068  ea4c0c07          ORR      r12,r12,r7
;;;114          tmpreg_ANALOG = (tmpreg_ANALOG & ~mask_s) | (PORT_InitStruct->PORT_MODE      <<  pos);
00006c  f8cdc004          STR      r12,[sp,#4]
000070  f8d1c024          LDR      r12,[r1,#0x24]
000074  ea2e0703          BIC      r7,lr,r3
000078  fa0cfc02          LSL      r12,r12,r2
00007c  ea470e0c          ORR      lr,r7,r12
;;;115          tmpreg_PULL   = (tmpreg_PULL   & ~mask_d) | (PORT_InitStruct->PORT_PULL_UP   << (pos + 16))
000080  f8d18008          LDR      r8,[r1,#8]
000084  f1020710          ADD      r7,r2,#0x10
000088  ea290c04          BIC      r12,r9,r4
00008c  fa08f807          LSL      r8,r8,r7
000090  ea4c0c08          ORR      r12,r12,r8
000094  f8d1800c          LDR      r8,[r1,#0xc]
000098  fa08f802          LSL      r8,r8,r2
00009c  ea4c0908          ORR      r9,r12,r8
;;;116                                                    | (PORT_InitStruct->PORT_PULL_DOWN <<  pos);
;;;117          tmpreg_PD     = (tmpreg_PD     & ~mask_d) | (PORT_InitStruct->PORT_PD_SHM    << (pos + 16))
0000a0  f8d18010          LDR      r8,[r1,#0x10]
0000a4  ea2a0c04          BIC      r12,r10,r4
0000a8  fa08f807          LSL      r8,r8,r7
0000ac  694f              LDR      r7,[r1,#0x14]
0000ae  ea4c0c08          ORR      r12,r12,r8
0000b2  4097              LSLS     r7,r7,r2
0000b4  ea4c0a07          ORR      r10,r12,r7
;;;118                                                    | (PORT_InitStruct->PORT_PD        <<  pos);
;;;119          tmpreg_PWR    = (tmpreg_PWR    & ~mask_l) | (PORT_InitStruct->PORT_SPEED     << (pos*2));
0000b8  f8d1c020          LDR      r12,[r1,#0x20]
0000bc  9f03              LDR      r7,[sp,#0xc]
0000be  fa0cfc07          LSL      r12,r12,r7
0000c2  9f00              LDR      r7,[sp,#0]
0000c4  43af              BICS     r7,r7,r5
0000c6  ea4c0c07          ORR      r12,r12,r7
;;;120          tmpreg_GFEN   = (tmpreg_GFEN   & ~mask_s) | (PORT_InitStruct->PORT_GFEN      <<  pos);
0000ca  f8cdc000          STR      r12,[sp,#0]
0000ce  f8d1c018          LDR      r12,[r1,#0x18]
0000d2  ea2b0703          BIC      r7,r11,r3
0000d6  fa0cfc02          LSL      r12,r12,r2
0000da  ea470b0c          ORR      r11,r7,r12
                  |L1.222|
;;;121        }
;;;122        mask_s <<= 1;
0000de  005b              LSLS     r3,r3,#1
;;;123        mask_l <<= 2;
0000e0  00ad              LSLS     r5,r5,#2
;;;124        mask_d <<= 1;
0000e2  0064              LSLS     r4,r4,#1
0000e4  0876              LSRS     r6,r6,#1              ;108
0000e6  1c52              ADDS     r2,r2,#1              ;108
                  |L1.232|
0000e8  2e00              CMP      r6,#0                 ;108
0000ea  d1aa              BNE      |L1.66|
;;;125        pos++;
;;;126      }
;;;127    #if defined  (USE_MDR1986VE9x)
;;;128      /* Configure PORT registers with new values */
;;;129      PORTx->OE     = tmpreg_OE ;
0000ec  9902              LDR      r1,[sp,#8]
0000ee  6041              STR      r1,[r0,#4]
;;;130      PORTx->FUNC   = tmpreg_FUNC ;
0000f0  9901              LDR      r1,[sp,#4]
0000f2  6081              STR      r1,[r0,#8]
;;;131      PORTx->ANALOG = tmpreg_ANALOG ;
0000f4  f8c0e00c          STR      lr,[r0,#0xc]
;;;132      PORTx->PULL   = tmpreg_PULL ;
0000f8  f8c09010          STR      r9,[r0,#0x10]
;;;133      PORTx->PD     = tmpreg_PD ;
0000fc  f8c0a014          STR      r10,[r0,#0x14]
;;;134      PORTx->PWR    = tmpreg_PWR ;
000100  9900              LDR      r1,[sp,#0]
000102  6181              STR      r1,[r0,#0x18]
;;;135      PORTx->GFEN   = tmpreg_GFEN ;
000104  f8c0b01c          STR      r11,[r0,#0x1c]
;;;136    #elif defined ( USE_MDR1986VE3 ) || defined (USE_MDR1986VE1T)
;;;137      /* Configure PORT registers with new values */
;;;138      PORTx->OE     = tmpreg_OE;
;;;139      PORTx->FUNC   = tmpreg_FUNC;
;;;140      PORTx->ANALOG = tmpreg_ANALOG;
;;;141      PORTx->PULL   = tmpreg_PULL;
;;;142      PORTx->PD     = tmpreg_PD;
;;;143      PORTx->PWR    = tmpreg_PWR;
;;;144      PORTx->GFEN   = tmpreg_GFEN;
;;;145    
;;;146    #endif
;;;147    
;;;148    }
000108  e8bd8fff          POP      {r0-r11,pc}
;;;149    
                          ENDP

                  PORT_StructInit PROC
;;;155      */
;;;156    void PORT_StructInit(PORT_InitTypeDef* PORT_InitStruct)
00010c  f64f71ff          MOV      r1,#0xffff
;;;157    {
;;;158      /* Reset PORT initialization structure parameters values */
;;;159      PORT_InitStruct->PORT_Pin        = PORT_Pin_All;
000110  8001              STRH     r1,[r0,#0]
;;;160      PORT_InitStruct->PORT_OE         = PORT_OE_IN;
000112  2100              MOVS     r1,#0
;;;161      PORT_InitStruct->PORT_PULL_UP    = PORT_PULL_UP_OFF;
000114  6041              STR      r1,[r0,#4]
;;;162      PORT_InitStruct->PORT_PULL_DOWN  = PORT_PULL_DOWN_OFF;
000116  6081              STR      r1,[r0,#8]
;;;163      PORT_InitStruct->PORT_PD_SHM     = PORT_PD_SHM_OFF;
000118  60c1              STR      r1,[r0,#0xc]
;;;164      PORT_InitStruct->PORT_PD         = PORT_PD_DRIVER;
00011a  6101              STR      r1,[r0,#0x10]
;;;165      PORT_InitStruct->PORT_GFEN       = PORT_GFEN_OFF;
00011c  6141              STR      r1,[r0,#0x14]
;;;166      PORT_InitStruct->PORT_FUNC       = PORT_FUNC_PORT;
00011e  6181              STR      r1,[r0,#0x18]
;;;167      PORT_InitStruct->PORT_SPEED      = PORT_OUTPUT_OFF;
000120  61c1              STR      r1,[r0,#0x1c]
;;;168      PORT_InitStruct->PORT_MODE       = PORT_MODE_ANALOG;
000122  6201              STR      r1,[r0,#0x20]
000124  6241              STR      r1,[r0,#0x24]
;;;169    }
000126  4770              BX       lr
;;;170    
                          ENDP

                  PORT_ReadInputDataBit PROC
;;;177      */
;;;178    uint8_t PORT_ReadInputDataBit(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin)
000128  6800              LDR      r0,[r0,#0]
;;;179    {
;;;180      uint8_t bitstatus;
;;;181    
;;;182      /* Check the parameters */
;;;183      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;184      assert_param(IS_GET_PORT_PIN(PORT_Pin));
;;;185    
;;;186      if ((PORTx->RXTX & PORT_Pin) != Bit_RESET)
00012a  4008              ANDS     r0,r0,r1
00012c  d000              BEQ      |L1.304|
;;;187      {
;;;188        bitstatus = (uint8_t)Bit_SET;
00012e  2001              MOVS     r0,#1
                  |L1.304|
;;;189      }
;;;190      else
;;;191      {
;;;192        bitstatus = (uint8_t)Bit_RESET;
;;;193      }
;;;194      return bitstatus;
;;;195    }
000130  4770              BX       lr
;;;196    
                          ENDP

                  PORT_ReadInputData PROC
;;;201      */
;;;202    uint32_t PORT_ReadInputData(MDR_PORT_TypeDef* PORTx)
000132  6800              LDR      r0,[r0,#0]
;;;203    {
;;;204      /* Check the parameters */
;;;205      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;206    
;;;207      return (PORTx->RXTX);
;;;208    }
000134  4770              BX       lr
;;;209    
                          ENDP

                  PORT_SetBits PROC
;;;216      */
;;;217    void PORT_SetBits ( MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin )
000136  6802              LDR      r2,[r0,#0]
;;;218    {
;;;219    	/* Check the parameters */
;;;220    	assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;221    	assert_param(IS_PORT_PIN(PORT_Pin));
;;;222    	assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
;;;223    
;;;224    #if defined  (USE_MDR1986VE9x)
;;;225    	PORTx->RXTX = PORT_Pin | (PORTx->RXTX );
000138  430a              ORRS     r2,r2,r1
00013a  6002              STR      r2,[r0,#0]
;;;226    #endif
;;;227    
;;;228    #if defined ( USE_MDR1986VE3 ) || defined (USE_MDR1986VE1T)
;;;229    	PORTx->SETTX = PORT_Pin;
;;;230    #endif
;;;231    }
00013c  4770              BX       lr
;;;232    
                          ENDP

                  PORT_ResetBits PROC
;;;239      */
;;;240    void PORT_ResetBits(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin)
00013e  6802              LDR      r2,[r0,#0]
;;;241    {
;;;242      /* Check the parameters */
;;;243      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;244      assert_param(IS_PORT_PIN(PORT_Pin));
;;;245      assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
;;;246    
;;;247    #if defined  (USE_MDR1986VE9x)
;;;248      PORTx->RXTX &= ~(PORT_Pin );
000140  438a              BICS     r2,r2,r1
000142  6002              STR      r2,[r0,#0]
;;;249    #endif
;;;250    
;;;251    #if defined ( USE_MDR1986VE3 ) || defined (USE_MDR1986VE1T)
;;;252      PORTx->CLRTX = PORT_Pin;
;;;253    #endif
;;;254    }
000144  4770              BX       lr
;;;255    
                          ENDP

                  PORT_WriteBit PROC
;;;266      */
;;;267    void PORT_WriteBit(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin, BitAction BitVal)
000146  6803              LDR      r3,[r0,#0]
;;;268    {
000148  b10a              CBZ      r2,|L1.334|
;;;269      uint32_t portdata;
;;;270      /* Check the parameters */
;;;271      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;272      assert_param(IS_GET_PORT_PIN(PORT_Pin));
;;;273      assert_param(IS_PORT_BIT_ACTION(BitVal));
;;;274      assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
;;;275    
;;;276      portdata = PORTx->RXTX ;
;;;277      if (BitVal != Bit_RESET)
;;;278      {
;;;279        PORTx->RXTX = portdata | PORT_Pin;
00014a  430b              ORRS     r3,r3,r1
00014c  e000              B        |L1.336|
                  |L1.334|
;;;280      }
;;;281      else
;;;282      {
;;;283        PORTx->RXTX = portdata & (~PORT_Pin);
00014e  438b              BICS     r3,r3,r1
                  |L1.336|
000150  6003              STR      r3,[r0,#0]            ;279
;;;284      }
;;;285    }
000152  4770              BX       lr
;;;286    
                          ENDP

                  PORT_Write PROC
;;;293      */
;;;294    void PORT_Write(MDR_PORT_TypeDef* PORTx, uint32_t PortVal)
000154  6001              STR      r1,[r0,#0]
;;;295    {
;;;296      /* Check the parameters */
;;;297      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;298      assert_param(IS_NOT_JTAG_PIN(PORTx, PortVal));
;;;299    
;;;300      PORTx->RXTX = PortVal ;
;;;301    }
000156  4770              BX       lr
;;;302    
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Keil\\MDR1986BExx\\1.4\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_port.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_port_c_a6c41966____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\Keil\\MDR1986BExx\\1.4\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___16_MDR32F9Qx_port_c_a6c41966____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_port_c_a6c41966____REVSH|
#line 144
|__asm___16_MDR32F9Qx_port_c_a6c41966____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
