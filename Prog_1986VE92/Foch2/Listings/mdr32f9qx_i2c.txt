; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list -c --asm --interleave -o.\objects\mdr32f9qx_i2c.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mdr32f9qx_i2c.d --cpu=Cortex-M3 --apcs=interwork -IC:\SOFT_project\Mk\Project_Synhron_OKR12\Prog_1986VE92\Foch2\RTE -IC:\SOFT_project\Mk\Project_Synhron_OKR12\Prog_1986VE92\Foch2\RTE\Device\MDR1986BE92 -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Config -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\CoreSupport -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=513 -D_RTE_ -DUSE_MDR32F9Q2_Rev1 -W --enum_is_int --signed_chars C:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_i2c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  I2C_DeInit PROC
;;;48       */
;;;49     void I2C_DeInit(void)
000000  4839              LDR      r0,|L1.232|
;;;50     {
;;;51       MDR_I2C_TypeDef *I2Cx;
;;;52     
;;;53       I2Cx = MDR_I2C;
;;;54     
;;;55       I2Cx->CTR = 0;
000002  2100              MOVS     r1,#0
000004  6081              STR      r1,[r0,#8]
;;;56       I2Cx->STA = 0;
000006  6101              STR      r1,[r0,#0x10]
;;;57       I2Cx->CMD = I2C_CMD_CLRINT;
000008  2201              MOVS     r2,#1
00000a  6182              STR      r2,[r0,#0x18]
;;;58       I2Cx->PRL = 0;
00000c  6001              STR      r1,[r0,#0]
;;;59       I2Cx->PRH = 0;
00000e  6041              STR      r1,[r0,#4]
;;;60     }
000010  4770              BX       lr
;;;61     
                          ENDP

                  I2C_Init PROC
;;;68       */
;;;69     void I2C_Init(const I2C_InitTypeDef* I2C_InitStruct)
000012  4935              LDR      r1,|L1.232|
;;;70     {
;;;71       MDR_I2C_TypeDef *I2Cx;
;;;72       uint32_t tmpreg_CTR;
;;;73       uint32_t tmpreg_PR;
;;;74     
;;;75       /* Check the parameters */
;;;76       assert_param(IS_I2C_SPEED(I2C_InitStruct->I2C_Speed));
;;;77       assert_param(IS_I2C_CLKDIV(I2C_InitStruct->I2C_ClkDiv));
;;;78     
;;;79       I2Cx = MDR_I2C;
;;;80     
;;;81       /* Form new values */
;;;82       tmpreg_CTR = I2Cx->CTR;
000014  688a              LDR      r2,[r1,#8]
;;;83     
;;;84       if ((I2C_InitStruct->I2C_Speed & I2C_SPEED_Msk) != I2C_SPEED_UP_TO_400KHz)
000016  7903              LDRB     r3,[r0,#4]
000018  069b              LSLS     r3,r3,#26
00001a  d502              BPL      |L1.34|
;;;85       {
;;;86         tmpreg_CTR |= I2C_CTR_S_I2C;
00001c  f0420220          ORR      r2,r2,#0x20
000020  e001              B        |L1.38|
                  |L1.34|
;;;87       }
;;;88       else
;;;89       {
;;;90         tmpreg_CTR &= ~I2C_CTR_S_I2C;
000022  f0220220          BIC      r2,r2,#0x20
                  |L1.38|
;;;91       }
;;;92     
;;;93       /* Configure I2C registers with new values */
;;;94       I2Cx->CTR = tmpreg_CTR;
000026  608a              STR      r2,[r1,#8]
;;;95     
;;;96       tmpreg_PR = I2C_InitStruct->I2C_ClkDiv;
000028  6800              LDR      r0,[r0,#0]
;;;97       I2Cx->PRL = tmpreg_PR;
00002a  6008              STR      r0,[r1,#0]
;;;98       I2Cx->PRH = tmpreg_PR >> 8;
00002c  0a00              LSRS     r0,r0,#8
00002e  6048              STR      r0,[r1,#4]
;;;99     }
000030  4770              BX       lr
;;;100    
                          ENDP

                  I2C_StructInit PROC
;;;106      */
;;;107    void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
000032  2100              MOVS     r1,#0
;;;108    {
;;;109      /* Reset I2C initialization structure parameters values */
;;;110      I2C_InitStruct->I2C_Speed  = I2C_SPEED_UP_TO_400KHz;
;;;111      I2C_InitStruct->I2C_ClkDiv = 1;
000034  6041              STR      r1,[r0,#4]
000036  2101              MOVS     r1,#1
000038  6001              STR      r1,[r0,#0]
;;;112    }
00003a  4770              BX       lr
;;;113    
                          ENDP

                  I2C_Cmd PROC
;;;119      */
;;;120    void I2C_Cmd(FunctionalState NewState)
00003c  4a2a              LDR      r2,|L1.232|
;;;121    {
;;;122      MDR_I2C_TypeDef *I2Cx;
;;;123      uint32_t tmpreg_CTR;
;;;124    
;;;125      /* Check the parameters */
;;;126      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;127    
;;;128      I2Cx = MDR_I2C;
;;;129    
;;;130      tmpreg_CTR = I2Cx->CTR;
00003e  6891              LDR      r1,[r2,#8]
000040  b110              CBZ      r0,|L1.72|
;;;131    
;;;132      /* Form new value */
;;;133      if (NewState != DISABLE)
;;;134      {
;;;135        /* Enable I2C by setting the EN_I2C bit in the CTR register */
;;;136        tmpreg_CTR |= I2C_CTR_EN_I2C;
000042  f0410080          ORR      r0,r1,#0x80
000046  e001              B        |L1.76|
                  |L1.72|
;;;137      }
;;;138      else
;;;139      {
;;;140        /* Disable I2C by resetting the EN_I2C bit in the CTR register */
;;;141        tmpreg_CTR &= ~I2C_CTR_EN_I2C;
000048  f0210080          BIC      r0,r1,#0x80
                  |L1.76|
;;;142      }
;;;143    
;;;144      /* Configure CTR register with new value */
;;;145      I2Cx->CTR = tmpreg_CTR;
00004c  6090              STR      r0,[r2,#8]
;;;146    }
00004e  4770              BX       lr
;;;147    
                          ENDP

                  I2C_ITConfig PROC
;;;153      */
;;;154    void I2C_ITConfig(FunctionalState NewState)
000050  4a25              LDR      r2,|L1.232|
;;;155    {
;;;156      MDR_I2C_TypeDef *I2Cx;
;;;157      uint32_t tmpreg_CTR;
;;;158    
;;;159      /* Check the parameters */
;;;160      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;161    
;;;162      I2Cx = MDR_I2C;
;;;163    
;;;164      tmpreg_CTR = I2Cx->CTR;
000052  6891              LDR      r1,[r2,#8]
000054  b110              CBZ      r0,|L1.92|
;;;165    
;;;166      /* Form new value */
;;;167      if (NewState != DISABLE)
;;;168      {
;;;169        /* Enable the I2C interrupts by setting the EN_INT bit in the CTR register */
;;;170        tmpreg_CTR |= I2C_CTR_EN_INT;
000056  f0410040          ORR      r0,r1,#0x40
00005a  e001              B        |L1.96|
                  |L1.92|
;;;171      }
;;;172      else
;;;173      {
;;;174        /* Disable the I2C interrupts by resetting the EN_INT bit in the CTR register */
;;;175        tmpreg_CTR &= ~I2C_CTR_EN_INT;
00005c  f0210040          BIC      r0,r1,#0x40
                  |L1.96|
;;;176      }
;;;177    
;;;178      /* Configure CTR register with new value */
;;;179      I2Cx->CTR = tmpreg_CTR;
000060  6090              STR      r0,[r2,#8]
;;;180    }
000062  4770              BX       lr
;;;181    
                          ENDP

                  I2C_GetITStatus PROC
;;;186      */
;;;187    ITStatus I2C_GetITStatus(void)
000064  4820              LDR      r0,|L1.232|
;;;188    {
;;;189      MDR_I2C_TypeDef *I2Cx;
;;;190      ITStatus bitstatus;
;;;191    
;;;192      I2Cx = MDR_I2C;
;;;193    
;;;194      if ((I2Cx->STA & I2C_STA_INT) == I2C_STA_INT)
000066  6900              LDR      r0,[r0,#0x10]
000068  07c0              LSLS     r0,r0,#31
00006a  d000              BEQ      |L1.110|
;;;195      {
;;;196        bitstatus = SET;
00006c  2001              MOVS     r0,#1
                  |L1.110|
;;;197      }
;;;198      else
;;;199      {
;;;200        bitstatus = RESET;
;;;201      }
;;;202    
;;;203      return bitstatus;
;;;204    }
00006e  4770              BX       lr
;;;205    
                          ENDP

                  I2C_ClearITPendingBit PROC
;;;210      */
;;;211    void I2C_ClearITPendingBit(void)
000070  481d              LDR      r0,|L1.232|
;;;212    {
;;;213      MDR_I2C_TypeDef *I2Cx;
;;;214    
;;;215      I2Cx = MDR_I2C;
;;;216    
;;;217      I2Cx->CMD |= I2C_CMD_CLRINT;
000072  6981              LDR      r1,[r0,#0x18]
000074  f0410101          ORR      r1,r1,#1
000078  6181              STR      r1,[r0,#0x18]
;;;218    }
00007a  4770              BX       lr
;;;219    
                          ENDP

                  I2C_Send7bitAddress PROC
;;;231      */
;;;232    void I2C_Send7bitAddress(uint8_t Address, uint32_t Direction)
00007c  4a1a              LDR      r2,|L1.232|
;;;233    {
;;;234      MDR_I2C_TypeDef *I2Cx;
;;;235    
;;;236      assert_param(IS_I2C_DIRECTION(Direction));
;;;237    
;;;238      I2Cx = MDR_I2C;
;;;239    
;;;240      I2Cx->TXD = (Address & ~I2C_Direction_Msk) | Direction;
00007e  f0200001          BIC      r0,r0,#1
000082  4308              ORRS     r0,r0,r1
000084  6150              STR      r0,[r2,#0x14]
;;;241      I2Cx->CMD = I2C_CMD_START | I2C_CMD_WR;
000086  2090              MOVS     r0,#0x90
000088  6190              STR      r0,[r2,#0x18]
;;;242    }
00008a  4770              BX       lr
;;;243    
                          ENDP

                  I2C_SendByte PROC
;;;248      */
;;;249    void I2C_SendByte(uint8_t ByteToSend)
00008c  4916              LDR      r1,|L1.232|
;;;250    {
;;;251      MDR_I2C_TypeDef *I2Cx;
;;;252    
;;;253      I2Cx = MDR_I2C;
;;;254    
;;;255      I2Cx->TXD = ByteToSend;
00008e  6148              STR      r0,[r1,#0x14]
;;;256      I2Cx->CMD = I2C_CMD_WR;
000090  2010              MOVS     r0,#0x10
000092  6188              STR      r0,[r1,#0x18]
;;;257    }
000094  4770              BX       lr
;;;258    
                          ENDP

                  I2C_SendSTOP PROC
;;;263      */
;;;264    void I2C_SendSTOP(void)
000096  4814              LDR      r0,|L1.232|
;;;265    {
;;;266      MDR_I2C_TypeDef *I2Cx;
;;;267    
;;;268      I2Cx = MDR_I2C;
;;;269    
;;;270      I2Cx->CMD = I2C_CMD_STOP;
000098  2140              MOVS     r1,#0x40
00009a  6181              STR      r1,[r0,#0x18]
;;;271    }
00009c  4770              BX       lr
;;;272    
                          ENDP

                  I2C_StartReceiveData PROC
;;;281      */
;;;282    void I2C_StartReceiveData(uint32_t Acknowlage)
00009e  4912              LDR      r1,|L1.232|
;;;283    {
;;;284      MDR_I2C_TypeDef *I2Cx;
;;;285    
;;;286      assert_param(IS_I2C_SEND_ACKNOWLAGE(Acknowlage));
;;;287    
;;;288      I2Cx = MDR_I2C;
;;;289    
;;;290      I2Cx->CMD = I2C_CMD_RD | Acknowlage;
0000a0  f0400020          ORR      r0,r0,#0x20
0000a4  6188              STR      r0,[r1,#0x18]
;;;291    }
0000a6  4770              BX       lr
;;;292    
                          ENDP

                  I2C_GetReceivedData PROC
;;;297      */
;;;298    uint8_t I2C_GetReceivedData(void)
0000a8  480f              LDR      r0,|L1.232|
;;;299    {
;;;300      MDR_I2C_TypeDef *I2Cx;
;;;301    
;;;302      I2Cx = MDR_I2C;
;;;303    
;;;304      return I2Cx->RXD;
0000aa  68c0              LDR      r0,[r0,#0xc]
0000ac  b2c0              UXTB     r0,r0
;;;305    }
0000ae  4770              BX       lr
;;;306    
                          ENDP

                  I2C_GetLastEvent PROC
;;;347      */
;;;348    uint32_t I2C_GetLastEvent(void)
0000b0  480d              LDR      r0,|L1.232|
;;;349    {
;;;350      MDR_I2C_TypeDef *I2Cx;
;;;351      uint32_t event;
;;;352    
;;;353      I2Cx = MDR_I2C;
;;;354    
;;;355      event = I2Cx->CMD | (I2Cx->STA << 8);
0000b2  6981              LDR      r1,[r0,#0x18]
0000b4  6900              LDR      r0,[r0,#0x10]
0000b6  ea412000          ORR      r0,r1,r0,LSL #8
;;;356      event |= ~event << 16;
0000ba  43c1              MVNS     r1,r0
0000bc  ea404001          ORR      r0,r0,r1,LSL #16
;;;357    
;;;358      return event;
;;;359    }
0000c0  4770              BX       lr
;;;360    
                          ENDP

                  I2C_CheckEvent PROC
;;;321      */
;;;322    ErrorStatus I2C_CheckEvent(uint32_t Event)
0000c2  b500              PUSH     {lr}
;;;323    {
0000c4  4602              MOV      r2,r0
;;;324      ErrorStatus errstatus;
;;;325    
;;;326      assert_param(IS_I2C_FLAGS(Event));
;;;327    
;;;328      if ((I2C_GetLastEvent() & Event) == Event)
0000c6  f7fffffe          BL       I2C_GetLastEvent
0000ca  4382              BICS     r2,r2,r0
0000cc  d001              BEQ      |L1.210|
;;;329      {
;;;330        errstatus = SUCCESS;
;;;331      }
;;;332      else
;;;333      {
;;;334        errstatus = ERROR;
0000ce  2000              MOVS     r0,#0
;;;335      }
;;;336    
;;;337      return errstatus;
;;;338    }
0000d0  bd00              POP      {pc}
                  |L1.210|
0000d2  2001              MOVS     r0,#1                 ;330
0000d4  bd00              POP      {pc}
;;;339    
                          ENDP

                  I2C_GetFlagStatus PROC
;;;386      */
;;;387    FlagStatus I2C_GetFlagStatus(uint32_t Flag)
0000d6  b500              PUSH     {lr}
;;;388    {
0000d8  4602              MOV      r2,r0
;;;389      FlagStatus bitstatus;
;;;390    
;;;391      assert_param(IS_I2C_FLAG(Flag));
;;;392    
;;;393      if ((I2C_GetLastEvent() & Flag) != 0)
0000da  f7fffffe          BL       I2C_GetLastEvent
0000de  4010              ANDS     r0,r0,r2
0000e0  d000              BEQ      |L1.228|
;;;394      {
;;;395        bitstatus = SET;
0000e2  2001              MOVS     r0,#1
                  |L1.228|
;;;396      }
;;;397      else
;;;398      {
;;;399        bitstatus = RESET;
;;;400      }
;;;401    
;;;402      return bitstatus;
;;;403    }
0000e4  bd00              POP      {pc}
;;;404    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L1.232|
                          DCD      0x40050000

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Keil\\MDR1986BExx\\1.4\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_i2c_c_7174d409____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\Keil\\MDR1986BExx\\1.4\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___15_MDR32F9Qx_i2c_c_7174d409____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_i2c_c_7174d409____REVSH|
#line 144
|__asm___15_MDR32F9Qx_i2c_c_7174d409____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
