; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list -c --asm --interleave -o.\objects\mdr32f9qx_iwdg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mdr32f9qx_iwdg.d --cpu=Cortex-M3 --apcs=interwork -IC:\SOFT_project\Mk\Project_Synhron_OKR12\Prog_1986VE92\Foch2\RTE -IC:\SOFT_project\Mk\Project_Synhron_OKR12\Prog_1986VE92\Foch2\RTE\Device\MDR1986BE92 -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Config -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\CoreSupport -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=513 -D_RTE_ -DUSE_MDR32F9Q2_Rev1 -W --enum_is_int --signed_chars C:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_iwdg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  IWDG_WriteAccessEnable PROC
;;;82       */
;;;83     void IWDG_WriteAccessEnable(void)
000000  4910              LDR      r1,|L1.68|
;;;84     {
;;;85       MDR_IWDG->KR = KR_KEY_WriteEnable;
000002  f2455055          MOV      r0,#0x5555
000006  6008              STR      r0,[r1,#0]
;;;86     }
000008  4770              BX       lr
;;;87     
                          ENDP

                  IWDG_WriteAccessDisable PROC
;;;92       */
;;;93     void IWDG_WriteAccessDisable(void)
00000a  490e              LDR      r1,|L1.68|
;;;94     {
;;;95       MDR_IWDG->KR = KR_KEY_WriteDisable;
00000c  2000              MOVS     r0,#0
00000e  6008              STR      r0,[r1,#0]
;;;96     }
000010  4770              BX       lr
;;;97     
                          ENDP

                  IWDG_SetPrescaler PROC
;;;110      */
;;;111    void IWDG_SetPrescaler(uint32_t IWDG_Prescaler)
000012  490c              LDR      r1,|L1.68|
;;;112    {
;;;113      /* Check the parameters */
;;;114      assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
;;;115    
;;;116      MDR_IWDG->PR = IWDG_Prescaler;
000014  6048              STR      r0,[r1,#4]
;;;117    }
000016  4770              BX       lr
;;;118    
                          ENDP

                  IWDG_SetReload PROC
;;;124      */
;;;125    void IWDG_SetReload(uint32_t Reload)
000018  490a              LDR      r1,|L1.68|
;;;126    {
;;;127      /* Check the parameters */
;;;128      assert_param(IS_IWDG_RELOAD(Reload));
;;;129    
;;;130      MDR_IWDG->RLR = Reload;
00001a  6088              STR      r0,[r1,#8]
;;;131    }
00001c  4770              BX       lr
;;;132    
                          ENDP

                  IWDG_ReloadCounter PROC
;;;138      */
;;;139    void IWDG_ReloadCounter(void)
00001e  4909              LDR      r1,|L1.68|
;;;140    {
;;;141      MDR_IWDG->KR = KR_KEY_Reload;
000020  f64a20aa          MOV      r0,#0xaaaa
000024  6008              STR      r0,[r1,#0]
;;;142    }
000026  4770              BX       lr
;;;143    
                          ENDP

                  IWDG_Enable PROC
;;;148      */
;;;149    void IWDG_Enable(void)
000028  4906              LDR      r1,|L1.68|
;;;150    {
;;;151      MDR_IWDG->KR = KR_KEY_Enable;
00002a  f64c40cc          MOV      r0,#0xcccc
00002e  6008              STR      r0,[r1,#0]
;;;152    }
000030  4770              BX       lr
;;;153    
                          ENDP

                  IWDG_GetFlagStatus PROC
;;;161      */
;;;162    FlagStatus IWDG_GetFlagStatus(uint32_t IWDG_FLAG)
000032  4904              LDR      r1,|L1.68|
;;;163    {
;;;164      FlagStatus bitstatus;
;;;165      /* Check the parameters */
;;;166      assert_param(IS_IWDG_FLAG(IWDG_FLAG));
;;;167      if ((MDR_IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
000034  68c9              LDR      r1,[r1,#0xc]
000036  4201              TST      r1,r0
000038  d001              BEQ      |L1.62|
;;;168      {
;;;169        bitstatus = SET;
00003a  2001              MOVS     r0,#1
;;;170      }
;;;171      else
;;;172      {
;;;173        bitstatus = RESET;
;;;174      }
;;;175      /* Return the flag status */
;;;176      return bitstatus;
;;;177    }
00003c  4770              BX       lr
                  |L1.62|
00003e  2000              MOVS     r0,#0                 ;173
000040  4770              BX       lr
;;;178    
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      0x40068000

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Keil\\MDR1986BExx\\1.4\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_iwdg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_iwdg_c_16c9fce5____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\Keil\\MDR1986BExx\\1.4\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___16_MDR32F9Qx_iwdg_c_16c9fce5____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_iwdg_c_16c9fce5____REVSH|
#line 144
|__asm___16_MDR32F9Qx_iwdg_c_16c9fce5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
